

using Microsoft.EntityFrameworkCore;

namespace PowerTree.Maui;

/// <summary>
/// Extensions for MauiAppBuilder
/// </summary>
public static class AppBuilderExtensions
{
    /// <summary>
    /// Initializes the PowerTree Library
    /// </summary>
    /// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/> </param>
    /// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="PowerTree.Maui"/></returns>
    public static MauiAppBuilder UseMauiPowerTreeMicroserviceSQLCore(this MauiAppBuilder builder, string connectionString)
    {
       // ========== PowerTree Full-Stack Microservice Specific Registration
        builder.Services.AddDbContext<PTContext>(options => options.UseSqlServer(connectionString));
        builder.Services.AddTransient(typeof(PowerTree.Maui.Interfaces.IGenericRepository<>), (typeof(PowerTree.Maui.Repositories.GenericRepository<>)));
        builder.Services.AddTransient<PowerTree.Maui.Interfaces.IHierarchyRepository, PowerTree.Maui.Repositories.HierarchyRepository>();
        builder.Services.AddTransient<PowerTree.Maui.Interfaces.INodeItemRepository, PowerTree.Maui.Repositories.NodeItemRepository>();
        builder.Services.AddTransient<PowerTree.Maui.Interfaces.INodeRepository, PowerTree.Maui.Repositories.NodeRepository>();
        builder.Services.AddTransient<PowerTree.Maui.Interfaces.IUnitOfWork, PowerTree.Maui.UnitOfWork.UnitOfWork>();
        builder.Services.AddTransient<PowerTree.Maui.Interfaces.ITreeViewService, PowerTree.Maui.Services.PTTreeViewService>();
        builder.Services.AddTransient<PowerTree.Maui.Helpers.PowerTreeViewBuilder>();

        return builder;
    }

}
